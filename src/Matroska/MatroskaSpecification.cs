using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using NEbml.Core;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated at 01/07/2021 17:57:33.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Matroska
{
    /// <summary>
    /// Contains the EBML elements specified by the Matroska project (https://matroska.org/technical/specs/index.html)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("ebml_matroska.tt", "1.0.0.0")]
    internal static class MatroskaSpecification
    {
        #region Helper
        private static readonly Dictionary<VInt, ElementDescriptor> _elementDescriptorsByVInt = new Dictionary<VInt, ElementDescriptor>();
        private static readonly Dictionary<ulong, ElementDescriptor> _elementDescriptorsByIdentifier = new Dictionary<ulong, ElementDescriptor>();

        /// <summary>
        /// Gets a dictionary of all Matroska elements.
        /// </summary>
        public static IReadOnlyDictionary<VInt, ElementDescriptor> ElementDescriptors => _elementDescriptorsByVInt;

        /// <summary>
        /// Gets a dictionary of all Matroska elements.
        /// </summary>
        public static IReadOnlyDictionary<ulong, ElementDescriptor> ElementDescriptorsByIdentifier => _elementDescriptorsByIdentifier;

        static MatroskaSpecification()
        {
            var fields = typeof(MatroskaSpecification).GetFields(BindingFlags.Public | BindingFlags.Static);

            foreach (FieldInfo field in fields.Where(ft => ft.FieldType == typeof(ElementDescriptor)))
            {
                var value = (ElementDescriptor)field.GetValue(null);
                _elementDescriptorsByVInt.Add(value.Identifier, value);
            }

            foreach (FieldInfo field in fields.Where(ft => ft.FieldType == typeof(ulong)))
            {
                var identifier = (ulong)field.GetValue(null);
                _elementDescriptorsByIdentifier.Add(identifier, _elementDescriptorsByVInt[VInt.FromEncoded(identifier)]);
            }
        }
        #endregion

        #region Definitions
        /// <summary>Set the EBML characteristics of the data to follow. Each EBML document has to start with this.</summary>
        public const ulong EBML = 0x1A45DFA3;
        public static readonly ElementDescriptor EBMLDescriptor = new ElementDescriptor((long)EBML, nameof(EBML), ElementType.MasterElement);

        /// <summary>The version of EBML parser used to create the file.</summary>
        public const ulong EBMLVersion = 0x00004286;
        public static readonly ElementDescriptor EBMLVersionDescriptor = new ElementDescriptor((long)EBMLVersion, nameof(EBMLVersion), ElementType.UnsignedInteger);

        /// <summary>The minimum EBML version a parser has to support to read this file.</summary>
        public const ulong EBMLReadVersion = 0x000042F7;
        public static readonly ElementDescriptor EBMLReadVersionDescriptor = new ElementDescriptor((long)EBMLReadVersion, nameof(EBMLReadVersion), ElementType.UnsignedInteger);

        /// <summary>The maximum length of the IDs you'll find in this file (4 or less in Matroska).</summary>
        public const ulong EBMLMaxIDLength = 0x000042F2;
        public static readonly ElementDescriptor EBMLMaxIDLengthDescriptor = new ElementDescriptor((long)EBMLMaxIDLength, nameof(EBMLMaxIDLength), ElementType.UnsignedInteger);

        /// <summary>The maximum length of the sizes you'll find in this file (8 or less in Matroska). This does not override the Element size indicated at the beginning of an Element. Elements that have an indicated size which is larger than what is allowed by EBMLMaxSizeLength shall be considered invalid.</summary>
        public const ulong EBMLMaxSizeLength = 0x000042F3;
        public static readonly ElementDescriptor EBMLMaxSizeLengthDescriptor = new ElementDescriptor((long)EBMLMaxSizeLength, nameof(EBMLMaxSizeLength), ElementType.UnsignedInteger);

        /// <summary>A string that describes the type of document that follows this EBML header. 'matroska' in our case or 'webm' for webm files.</summary>
        public const ulong DocType = 0x00004282;
        public static readonly ElementDescriptor DocTypeDescriptor = new ElementDescriptor((long)DocType, nameof(DocType), ElementType.AsciiString);

        /// <summary>The version of DocType interpreter used to create the file.</summary>
        public const ulong DocTypeVersion = 0x00004287;
        public static readonly ElementDescriptor DocTypeVersionDescriptor = new ElementDescriptor((long)DocTypeVersion, nameof(DocTypeVersion), ElementType.UnsignedInteger);

        /// <summary>The minimum DocType version an interpreter has to support to read this file.</summary>
        public const ulong DocTypeReadVersion = 0x00004285;
        public static readonly ElementDescriptor DocTypeReadVersionDescriptor = new ElementDescriptor((long)DocTypeReadVersion, nameof(DocTypeReadVersion), ElementType.UnsignedInteger);

        /// <summary>Used to void damaged data, to avoid unexpected behaviors when using damaged data. The content is discarded. Also used to reserve space in a sub-element for later use.</summary>
        public const ulong Void = 0x000000EC;
        public static readonly ElementDescriptor VoidDescriptor = new ElementDescriptor((long)Void, nameof(Void), ElementType.Binary);

        /// <summary>The CRC is computed on all the data of the Master-element it's in. The CRC Element should be the first in it's parent master for easier reading. All level 1 Elements should include a CRC-32. The CRC in use is the IEEE CRC32 Little Endian</summary>
        public const ulong CRC32 = 0x000000BF;
        public static readonly ElementDescriptor CRC32Descriptor = new ElementDescriptor((long)CRC32, nameof(CRC32), ElementType.Binary);

        /// <summary>Contain signature of some (coming) Elements in the stream.</summary>
        public const ulong SignatureSlot = 0x1B538667;
        public static readonly ElementDescriptor SignatureSlotDescriptor = new ElementDescriptor((long)SignatureSlot, nameof(SignatureSlot), ElementType.MasterElement);

        /// <summary>Signature algorithm used (1=RSA, 2=elliptic).</summary>
        public const ulong SignatureAlgo = 0x00007E8A;
        public static readonly ElementDescriptor SignatureAlgoDescriptor = new ElementDescriptor((long)SignatureAlgo, nameof(SignatureAlgo), ElementType.UnsignedInteger);

        /// <summary>Hash algorithm used (1=SHA1-160, 2=MD5).</summary>
        public const ulong SignatureHash = 0x00007E9A;
        public static readonly ElementDescriptor SignatureHashDescriptor = new ElementDescriptor((long)SignatureHash, nameof(SignatureHash), ElementType.UnsignedInteger);

        /// <summary>The public key to use with the algorithm (in the case of a PKI-based signature).</summary>
        public const ulong SignaturePublicKey = 0x00007EA5;
        public static readonly ElementDescriptor SignaturePublicKeyDescriptor = new ElementDescriptor((long)SignaturePublicKey, nameof(SignaturePublicKey), ElementType.Binary);

        /// <summary>The signature of the data (until a new.</summary>
        public const ulong Signature = 0x00007EB5;
        public static readonly ElementDescriptor SignatureDescriptor = new ElementDescriptor((long)Signature, nameof(Signature), ElementType.Binary);

        /// <summary>Contains Elements that will be used to compute the signature.</summary>
        public const ulong SignatureElements = 0x00007E5B;
        public static readonly ElementDescriptor SignatureElementsDescriptor = new ElementDescriptor((long)SignatureElements, nameof(SignatureElements), ElementType.MasterElement);

        /// <summary>A list consists of a number of consecutive Elements that represent one case where data is used in signature. Ex: Cluster|Block|BlockAdditional means that the BlockAdditional of all Blocks in all Clusters is used for encryption.</summary>
        public const ulong SignatureElementList = 0x00007E7B;
        public static readonly ElementDescriptor SignatureElementListDescriptor = new ElementDescriptor((long)SignatureElementList, nameof(SignatureElementList), ElementType.MasterElement);

        /// <summary>An Element ID whose data will be used to compute the signature.</summary>
        public const ulong SignedElement = 0x00006532;
        public static readonly ElementDescriptor SignedElementDescriptor = new ElementDescriptor((long)SignedElement, nameof(SignedElement), ElementType.Binary);

        /// <summary>[Required] The Root Element that contains all other Top-Level Elements (Elements defined only at Level 1).A Matroska file is composed of 1 Segment.    </summary>
        public const ulong Segment = 0x18538067;
        public static readonly ElementDescriptor SegmentDescriptor = new ElementDescriptor((long)Segment, nameof(Segment), ElementType.MasterElement);

        /// <summary>Contain attached files.</summary>
        public const ulong Attachments = 0x1941A469;
        public static readonly ElementDescriptor AttachmentsDescriptor = new ElementDescriptor((long)Attachments, nameof(Attachments), ElementType.MasterElement);

        /// <summary>[Required] An attached file.</summary>
        public const ulong AttachedFile = 0x61A7;
        public static readonly ElementDescriptor AttachedFileDescriptor = new ElementDescriptor((long)AttachedFile, nameof(AttachedFile), ElementType.MasterElement);

        /// <summary>[Required] The data of the file.</summary>
        public const ulong FileData = 0x465C;
        public static readonly ElementDescriptor FileDataDescriptor = new ElementDescriptor((long)FileData, nameof(FileData), ElementType.Binary);

        /// <summary>A human-friendly name for the attached file.</summary>
        public const ulong FileDescription = 0x467E;
        public static readonly ElementDescriptor FileDescriptionDescriptor = new ElementDescriptor((long)FileDescription, nameof(FileDescription), ElementType.Utf8String);

        /// <summary>[Required] MIME type of the file.</summary>
        public const ulong FileMimeType = 0x4660;
        public static readonly ElementDescriptor FileMimeTypeDescriptor = new ElementDescriptor((long)FileMimeType, nameof(FileMimeType), ElementType.AsciiString);

        /// <summary>[Required] Filename of the attached file.</summary>
        public const ulong FileName = 0x466E;
        public static readonly ElementDescriptor FileNameDescriptor = new ElementDescriptor((long)FileName, nameof(FileName), ElementType.Utf8String);

        /// <summary>A binary value that a track/codec can refer to when the attachment is needed.</summary>
        public const ulong FileReferral = 0x4675;
        public static readonly ElementDescriptor FileReferralDescriptor = new ElementDescriptor((long)FileReferral, nameof(FileReferral), ElementType.Binary);

        /// <summary>[Required] Unique ID representing the file, as random as possible.</summary>
        public const ulong FileUID = 0x46AE;
        public static readonly ElementDescriptor FileUIDDescriptor = new ElementDescriptor((long)FileUID, nameof(FileUID), ElementType.UnsignedInteger);

        /// <summary>The timecode at which this optimized font attachment goes out of context, based on the Segment TimecodeScale. This element is reserved for future use and if written must be the segment end time. See [@?DivXWorldFonts].</summary>
        public const ulong FileUsedEndTime = 0x4662;
        public static readonly ElementDescriptor FileUsedEndTimeDescriptor = new ElementDescriptor((long)FileUsedEndTime, nameof(FileUsedEndTime), ElementType.UnsignedInteger);

        /// <summary>The timecode at which this optimized font attachment comes into context, based on the Segment TimecodeScale. This element is reserved for future use and if written must be the segment start time. See [@?DivXWorldFonts].</summary>
        public const ulong FileUsedStartTime = 0x4661;
        public static readonly ElementDescriptor FileUsedStartTimeDescriptor = new ElementDescriptor((long)FileUsedStartTime, nameof(FileUsedStartTime), ElementType.UnsignedInteger);

        /// <summary>A system to define basic menus and partition data.For more detailed information, look at the Chapters explanation in (#chapters).    </summary>
        public const ulong Chapters = 0x1043A770;
        public static readonly ElementDescriptor ChaptersDescriptor = new ElementDescriptor((long)Chapters, nameof(Chapters), ElementType.MasterElement);

        /// <summary>[Required] Contains all information about a Segment edition.</summary>
        public const ulong EditionEntry = 0x45B9;
        public static readonly ElementDescriptor EditionEntryDescriptor = new ElementDescriptor((long)EditionEntry, nameof(EditionEntry), ElementType.MasterElement);

        /// <summary>[Required] Contains the atom information to use as the chapter atom (apply to all tracks).</summary>
        public const ulong ChapterAtom = 0xB6;
        public static readonly ElementDescriptor ChapterAtomDescriptor = new ElementDescriptor((long)ChapterAtom, nameof(ChapterAtom), ElementType.MasterElement);

        /// <summary>Contains all the commands associated to the Atom.</summary>
        public const ulong ChapProcess = 0x6944;
        public static readonly ElementDescriptor ChapProcessDescriptor = new ElementDescriptor((long)ChapProcess, nameof(ChapProcess), ElementType.MasterElement);

        /// <summary>[Required] Contains the type of the codec used for the processing.A value of 0 means native Matroska processing (to be defined), a value of 1 means the DVD command set is used; see (#dvd-menu-1) on DVD menus.More codec IDs can be added later.    </summary>
        public const ulong ChapProcessCodecID = 0x6955;
        public static readonly ElementDescriptor ChapProcessCodecIDDescriptor = new ElementDescriptor((long)ChapProcessCodecID, nameof(ChapProcessCodecID), ElementType.UnsignedInteger);

        /// <summary>Contains all the commands associated to the Atom.</summary>
        public const ulong ChapProcessCommand = 0x6911;
        public static readonly ElementDescriptor ChapProcessCommandDescriptor = new ElementDescriptor((long)ChapProcessCommand, nameof(ChapProcessCommand), ElementType.MasterElement);

        /// <summary>[Required] Contains the command information.The data **SHOULD** be interpreted depending on the ChapProcessCodecID value. For ChapProcessCodecID = 1,the data correspond to the binary DVD cell pre/post commands; see (#dvd-menu-1) on DVD menus.    </summary>
        public const ulong ChapProcessData = 0x6933;
        public static readonly ElementDescriptor ChapProcessDataDescriptor = new ElementDescriptor((long)ChapProcessData, nameof(ChapProcessData), ElementType.Binary);

        /// <summary>[Required] Defines when the process command **SHOULD** be handled</summary>
        public const ulong ChapProcessTime = 0x6922;
        public static readonly ElementDescriptor ChapProcessTimeDescriptor = new ElementDescriptor((long)ChapProcessTime, nameof(ChapProcessTime), ElementType.UnsignedInteger);

        /// <summary>Some optional data attached to the ChapProcessCodecID information.For ChapProcessCodecID = 1, it is the "DVD level" equivalent; see (#dvd-menu-1) on DVD menus.    </summary>
        public const ulong ChapProcessPrivate = 0x450D;
        public static readonly ElementDescriptor ChapProcessPrivateDescriptor = new ElementDescriptor((long)ChapProcessPrivate, nameof(ChapProcessPrivate), ElementType.Binary);

        /// <summary>Contains all possible strings to use for the chapter display.</summary>
        public const ulong ChapterDisplay = 0x80;
        public static readonly ElementDescriptor ChapterDisplayDescriptor = new ElementDescriptor((long)ChapterDisplay, nameof(ChapterDisplay), ElementType.MasterElement);

        /// <summary>The countries corresponding to the string, same 2 octets country-codes as in Internet domains [@!IANADomains] based on [@!ISO3166-1] alpha-2 codes.This Element **MUST** be ignored if the ChapLanguageIETF Element is used within the same ChapterDisplay Element.    </summary>
        public const ulong ChapCountry = 0x437E;
        public static readonly ElementDescriptor ChapCountryDescriptor = new ElementDescriptor((long)ChapCountry, nameof(ChapCountry), ElementType.AsciiString);

        /// <summary>[Required] The languages corresponding to the string,in the bibliographic ISO-639-2 form [@!ISO639-2].This Element **MUST** be ignored if the ChapLanguageIETF Element is used within the same ChapterDisplay Element.    </summary>
        public const ulong ChapLanguage = 0x437C;
        public static readonly ElementDescriptor ChapLanguageDescriptor = new ElementDescriptor((long)ChapLanguage, nameof(ChapLanguage), ElementType.AsciiString);

        /// <summary>Specifies the language used in the ChapString according to [@!BCP47]and using the IANA Language Subtag Registry [@!IANALangRegistry].If this Element is used, then any ChapLanguage Elements used in the same ChapterDisplay **MUST** be ignored.    </summary>
        public const ulong ChapLanguageIETF = 0x437D;
        public static readonly ElementDescriptor ChapLanguageIETFDescriptor = new ElementDescriptor((long)ChapLanguageIETF, nameof(ChapLanguageIETF), ElementType.AsciiString);

        /// <summary>[Required] Contains the string to use as the chapter atom.</summary>
        public const ulong ChapString = 0x85;
        public static readonly ElementDescriptor ChapStringDescriptor = new ElementDescriptor((long)ChapString, nameof(ChapString), ElementType.Utf8String);

        /// <summary>[Required] Specify whether the chapter is enabled. It can be enabled/disabled by a Control Track.When disabled, the movie **SHOULD** skip all the content between the TimeStart and TimeEnd of this chapter; see (#chapter-flags) on Chapter flags. (1 bit)    </summary>
        public const ulong ChapterFlagEnabled = 0x4598;
        public static readonly ElementDescriptor ChapterFlagEnabledDescriptor = new ElementDescriptor((long)ChapterFlagEnabled, nameof(ChapterFlagEnabled), ElementType.UnsignedInteger);

        /// <summary>[Required] If a chapter is hidden (1), it **SHOULD NOT** be available to the user interface(but still to Control Tracks; see (#chapter-flags) on Chapter flags). (1 bit)    </summary>
        public const ulong ChapterFlagHidden = 0x98;
        public static readonly ElementDescriptor ChapterFlagHiddenDescriptor = new ElementDescriptor((long)ChapterFlagHidden, nameof(ChapterFlagHidden), ElementType.UnsignedInteger);

        /// <summary>Specify the physical equivalent of this ChapterAtom like "DVD" (60) or "SIDE" (50);see (#physical-types) for a complete list of values.    </summary>
        public const ulong ChapterPhysicalEquiv = 0x63C3;
        public static readonly ElementDescriptor ChapterPhysicalEquivDescriptor = new ElementDescriptor((long)ChapterPhysicalEquiv, nameof(ChapterPhysicalEquiv), ElementType.UnsignedInteger);

        /// <summary>The EditionUID to play from the Segment linked in ChapterSegmentUID.If ChapterSegmentEditionUID is undeclared, then no Edition of the linked Segment is used.    </summary>
        public const ulong ChapterSegmentEditionUID = 0x6EBC;
        public static readonly ElementDescriptor ChapterSegmentEditionUIDDescriptor = new ElementDescriptor((long)ChapterSegmentEditionUID, nameof(ChapterSegmentEditionUID), ElementType.UnsignedInteger);

        /// <summary>The SegmentUID of another Segment to play during this chapter.</summary>
        public const ulong ChapterSegmentUID = 0x6E67;
        public static readonly ElementDescriptor ChapterSegmentUIDDescriptor = new ElementDescriptor((long)ChapterSegmentUID, nameof(ChapterSegmentUID), ElementType.Binary);

        /// <summary>A unique string ID to identify the Chapter.Use for WebVTT cue identifier storage [@!WebVTT].    </summary>
        public const ulong ChapterStringUID = 0x5654;
        public static readonly ElementDescriptor ChapterStringUIDDescriptor = new ElementDescriptor((long)ChapterStringUID, nameof(ChapterStringUID), ElementType.Utf8String);

        /// <summary>Timestamp of the end of Chapter (timestamp excluded, not scaled).</summary>
        public const ulong ChapterTimeEnd = 0x92;
        public static readonly ElementDescriptor ChapterTimeEndDescriptor = new ElementDescriptor((long)ChapterTimeEnd, nameof(ChapterTimeEnd), ElementType.UnsignedInteger);

        /// <summary>[Required] Timestamp of the start of Chapter (not scaled).</summary>
        public const ulong ChapterTimeStart = 0x91;
        public static readonly ElementDescriptor ChapterTimeStartDescriptor = new ElementDescriptor((long)ChapterTimeStart, nameof(ChapterTimeStart), ElementType.UnsignedInteger);

        /// <summary>List of tracks on which the chapter applies. If this Element is not present, all tracks apply</summary>
        public const ulong ChapterTrack = 0x8F;
        public static readonly ElementDescriptor ChapterTrackDescriptor = new ElementDescriptor((long)ChapterTrack, nameof(ChapterTrack), ElementType.MasterElement);

        /// <summary>[Required] UID of the Track to apply this chapter to.In the absence of a control track, choosing this chapter will select the listed Tracks and deselect unlisted tracks.Absence of this Element indicates that the Chapter **SHOULD** be applied to any currently used Tracks.    </summary>
        public const ulong ChapterTrackUID = 0x89;
        public static readonly ElementDescriptor ChapterTrackUIDDescriptor = new ElementDescriptor((long)ChapterTrackUID, nameof(ChapterTrackUID), ElementType.UnsignedInteger);

        /// <summary>[Required] A unique ID to identify the Chapter.</summary>
        public const ulong ChapterUID = 0x73C4;
        public static readonly ElementDescriptor ChapterUIDDescriptor = new ElementDescriptor((long)ChapterUID, nameof(ChapterUID), ElementType.UnsignedInteger);

        /// <summary>[Required] If a flag is set (1) the edition **SHOULD** be used as the default one. (1 bit)</summary>
        public const ulong EditionFlagDefault = 0x45DB;
        public static readonly ElementDescriptor EditionFlagDefaultDescriptor = new ElementDescriptor((long)EditionFlagDefault, nameof(EditionFlagDefault), ElementType.UnsignedInteger);

        /// <summary>[Required] If an edition is hidden (1), it **SHOULD NOT** be available to the user interface(but still to Control Tracks; see (#chapter-flags) on Chapter flags). (1 bit)    </summary>
        public const ulong EditionFlagHidden = 0x45BD;
        public static readonly ElementDescriptor EditionFlagHiddenDescriptor = new ElementDescriptor((long)EditionFlagHidden, nameof(EditionFlagHidden), ElementType.UnsignedInteger);

        /// <summary>Specify if the chapters can be defined multiple times and the order to play them is enforced. (1 bit)</summary>
        public const ulong EditionFlagOrdered = 0x45DD;
        public static readonly ElementDescriptor EditionFlagOrderedDescriptor = new ElementDescriptor((long)EditionFlagOrdered, nameof(EditionFlagOrdered), ElementType.UnsignedInteger);

        /// <summary>A unique ID to identify the edition. It's useful for tagging an edition.</summary>
        public const ulong EditionUID = 0x45BC;
        public static readonly ElementDescriptor EditionUIDDescriptor = new ElementDescriptor((long)EditionUID, nameof(EditionUID), ElementType.UnsignedInteger);

        /// <summary>The Top-Level Element containing the (monolithic) Block structure.</summary>
        public const ulong Cluster = 0x1F43B675;
        public static readonly ElementDescriptor ClusterDescriptor = new ElementDescriptor((long)Cluster, nameof(Cluster), ElementType.MasterElement);

        /// <summary>Basic container of information containing a single Block and information specific to that Block.</summary>
        public const ulong BlockGroup = 0xA0;
        public static readonly ElementDescriptor BlockGroupDescriptor = new ElementDescriptor((long)BlockGroup, nameof(BlockGroup), ElementType.MasterElement);

        /// <summary>[Required] Block containing the actual data to be rendered and a timestamp relative to the Cluster Timestamp;see (#block-structure) on Block Structure.    </summary>
        public const ulong Block = 0xA1;
        public static readonly ElementDescriptor BlockDescriptor = new ElementDescriptor((long)Block, nameof(Block), ElementType.Binary);

        /// <summary>Contain additional blocks to complete the main one.An EBML parser that has no knowledge of the Block structure could still see and use/skip these data.    </summary>
        public const ulong BlockAdditions = 0x75A1;
        public static readonly ElementDescriptor BlockAdditionsDescriptor = new ElementDescriptor((long)BlockAdditions, nameof(BlockAdditions), ElementType.MasterElement);

        /// <summary>[Required] Contain the BlockAdditional and some parameters.</summary>
        public const ulong BlockMore = 0xA6;
        public static readonly ElementDescriptor BlockMoreDescriptor = new ElementDescriptor((long)BlockMore, nameof(BlockMore), ElementType.MasterElement);

        /// <summary>[Required] An ID to identify the BlockAdditional level.If BlockAddIDType of the corresponding block is 0, this value is also the value of BlockAddIDType for the meaning of the content of BlockAdditional.    </summary>
        public const ulong BlockAddID = 0xEE;
        public static readonly ElementDescriptor BlockAddIDDescriptor = new ElementDescriptor((long)BlockAddID, nameof(BlockAddID), ElementType.UnsignedInteger);

        /// <summary>[Required] Interpreted by the codec as it wishes (using the BlockAddID).</summary>
        public const ulong BlockAdditional = 0xA5;
        public static readonly ElementDescriptor BlockAdditionalDescriptor = new ElementDescriptor((long)BlockAdditional, nameof(BlockAdditional), ElementType.Binary);

        /// <summary>The duration of the Block (based on TimestampScale).The BlockDuration Element can be useful at the end of a Track to define the duration of the last frame (as there is no subsequent Block available),or when there is a break in a track like for subtitle tracks.    </summary>
        public const ulong BlockDuration = 0x9B;
        public static readonly ElementDescriptor BlockDurationDescriptor = new ElementDescriptor((long)BlockDuration, nameof(BlockDuration), ElementType.UnsignedInteger);

        /// <summary>A Block with no data. It **MUST** be stored in the stream at the place the real Block would be in display order.    </summary>
        public const ulong BlockVirtual = 0xA2;
        public static readonly ElementDescriptor BlockVirtualDescriptor = new ElementDescriptor((long)BlockVirtual, nameof(BlockVirtual), ElementType.Binary);

        /// <summary>The new codec state to use. Data interpretation is private to the codec.This information **SHOULD** always be referenced by a seek entry.    </summary>
        public const ulong CodecState = 0xA4;
        public static readonly ElementDescriptor CodecStateDescriptor = new ElementDescriptor((long)CodecState, nameof(CodecState), ElementType.Binary);

        /// <summary>Duration in nanoseconds of the silent data added to the Block(padding at the end of the Block for positive value, at the beginning of the Block for negative value).The duration of DiscardPadding is not calculated in the duration of the TrackEntry and **SHOULD** be discarded during playback.    </summary>
        public const ulong DiscardPadding = 0x75A2;
        public static readonly ElementDescriptor DiscardPaddingDescriptor = new ElementDescriptor((long)DiscardPadding, nameof(DiscardPadding), ElementType.SignedInteger);

        /// <summary>Timestamp of another frame used as a reference (ie: B or P frame).The timestamp is relative to the block it's attached to.    </summary>
        public const ulong ReferenceBlock = 0xFB;
        public static readonly ElementDescriptor ReferenceBlockDescriptor = new ElementDescriptor((long)ReferenceBlock, nameof(ReferenceBlock), ElementType.SignedInteger);

        /// <summary>Contains information about the last reference frame. See [@?DivXTrickTrack].</summary>
        public const ulong ReferenceFrame = 0xC8;
        public static readonly ElementDescriptor ReferenceFrameDescriptor = new ElementDescriptor((long)ReferenceFrame, nameof(ReferenceFrame), ElementType.MasterElement);

        /// <summary>[Required] The relative offset, in bytes, from the previous BlockGroup element for this Smooth FF/RW video track to the containing BlockGroup element. See [@?DivXTrickTrack].</summary>
        public const ulong ReferenceOffset = 0xC9;
        public static readonly ElementDescriptor ReferenceOffsetDescriptor = new ElementDescriptor((long)ReferenceOffset, nameof(ReferenceOffset), ElementType.UnsignedInteger);

        /// <summary>[Required] The timecode of the BlockGroup pointed to by ReferenceOffset. See [@?DivXTrickTrack].</summary>
        public const ulong ReferenceTimestamp = 0xCA;
        public static readonly ElementDescriptor ReferenceTimestampDescriptor = new ElementDescriptor((long)ReferenceTimestamp, nameof(ReferenceTimestamp), ElementType.UnsignedInteger);

        /// <summary>[Required] This frame is referenced and has the specified cache priority.In cache only a frame of the same or higher priority can replace this frame. A value of 0 means the frame is not referenced.    </summary>
        public const ulong ReferencePriority = 0xFA;
        public static readonly ElementDescriptor ReferencePriorityDescriptor = new ElementDescriptor((long)ReferencePriority, nameof(ReferencePriority), ElementType.UnsignedInteger);

        /// <summary>The Segment Position of the data that would otherwise be in position of the virtual block.</summary>
        public const ulong ReferenceVirtual = 0xFD;
        public static readonly ElementDescriptor ReferenceVirtualDescriptor = new ElementDescriptor((long)ReferenceVirtual, nameof(ReferenceVirtual), ElementType.SignedInteger);

        /// <summary>Contains slices description.</summary>
        public const ulong Slices = 0x8E;
        public static readonly ElementDescriptor SlicesDescriptor = new ElementDescriptor((long)Slices, nameof(Slices), ElementType.MasterElement);

        /// <summary>Contains extra time information about the data contained in the Block.Being able to interpret this Element is not **REQUIRED** for playback.    </summary>
        public const ulong TimeSlice = 0xE8;
        public static readonly ElementDescriptor TimeSliceDescriptor = new ElementDescriptor((long)TimeSlice, nameof(TimeSlice), ElementType.MasterElement);

        /// <summary>The ID of the BlockAdditional Element (0 is the main Block).</summary>
        public const ulong BlockAdditionID = 0xCB;
        public static readonly ElementDescriptor BlockAdditionIDDescriptor = new ElementDescriptor((long)BlockAdditionID, nameof(BlockAdditionID), ElementType.UnsignedInteger);

        /// <summary>The (scaled) delay to apply to the Element.</summary>
        public const ulong Delay = 0xCE;
        public static readonly ElementDescriptor DelayDescriptor = new ElementDescriptor((long)Delay, nameof(Delay), ElementType.UnsignedInteger);

        /// <summary>The number of the frame to generate from this lace with this delay(allow you to generate many frames from the same Block/Frame).    </summary>
        public const ulong FrameNumber = 0xCD;
        public static readonly ElementDescriptor FrameNumberDescriptor = new ElementDescriptor((long)FrameNumber, nameof(FrameNumber), ElementType.UnsignedInteger);

        /// <summary>The reverse number of the frame in the lace (0 is the last frame, 1 is the next to last, etc).Being able to interpret this Element is not **REQUIRED** for playback.    </summary>
        public const ulong LaceNumber = 0xCC;
        public static readonly ElementDescriptor LaceNumberDescriptor = new ElementDescriptor((long)LaceNumber, nameof(LaceNumber), ElementType.UnsignedInteger);

        /// <summary>The (scaled) duration to apply to the Element.</summary>
        public const ulong SliceDuration = 0xCF;
        public static readonly ElementDescriptor SliceDurationDescriptor = new ElementDescriptor((long)SliceDuration, nameof(SliceDuration), ElementType.UnsignedInteger);

        /// <summary>Similar to SimpleBlock, see (#simpleblock-structure),but the data inside the Block are Transformed (encrypt and/or signed).    </summary>
        public const ulong EncryptedBlock = 0xAF;
        public static readonly ElementDescriptor EncryptedBlockDescriptor = new ElementDescriptor((long)EncryptedBlock, nameof(EncryptedBlock), ElementType.Binary);

        /// <summary>The Segment Position of the Cluster in the Segment (0 in live streams).It might help to resynchronise offset on damaged streams.    </summary>
        public const ulong Position = 0xA7;
        public static readonly ElementDescriptor PositionDescriptor = new ElementDescriptor((long)Position, nameof(Position), ElementType.UnsignedInteger);

        /// <summary>Size of the previous Cluster, in octets. Can be useful for backward playing.</summary>
        public const ulong PrevSize = 0xAB;
        public static readonly ElementDescriptor PrevSizeDescriptor = new ElementDescriptor((long)PrevSize, nameof(PrevSize), ElementType.UnsignedInteger);

        /// <summary>The list of tracks that are not used in that part of the stream.It is useful when using overlay tracks on seeking or to decide what track to use.    </summary>
        public const ulong SilentTracks = 0x5854;
        public static readonly ElementDescriptor SilentTracksDescriptor = new ElementDescriptor((long)SilentTracks, nameof(SilentTracks), ElementType.MasterElement);

        /// <summary>One of the track number that are not used from now on in the stream.It could change later if not specified as silent in a further Cluster.    </summary>
        public const ulong SilentTrackNumber = 0x58D7;
        public static readonly ElementDescriptor SilentTrackNumberDescriptor = new ElementDescriptor((long)SilentTrackNumber, nameof(SilentTrackNumber), ElementType.UnsignedInteger);

        /// <summary>Similar to Block, see (#block-structure), but without all the extra information,mostly used to reduced overhead when no extra feature is needed; see (#simpleblock-structure) on SimpleBlock Structure.    </summary>
        public const ulong SimpleBlock = 0xA3;
        public static readonly ElementDescriptor SimpleBlockDescriptor = new ElementDescriptor((long)SimpleBlock, nameof(SimpleBlock), ElementType.Binary);

        /// <summary>[Required] Absolute timestamp of the cluster (based on TimestampScale).</summary>
        public const ulong Timestamp = 0xE7;
        public static readonly ElementDescriptor TimestampDescriptor = new ElementDescriptor((long)Timestamp, nameof(Timestamp), ElementType.UnsignedInteger);

        /// <summary>A Top-Level Element to speed seeking access.All entries are local to the Segment.    </summary>
        public const ulong Cues = 0x1C53BB6B;
        public static readonly ElementDescriptor CuesDescriptor = new ElementDescriptor((long)Cues, nameof(Cues), ElementType.MasterElement);

        /// <summary>[Required] Contains all information relative to a seek point in the Segment.</summary>
        public const ulong CuePoint = 0xBB;
        public static readonly ElementDescriptor CuePointDescriptor = new ElementDescriptor((long)CuePoint, nameof(CuePoint), ElementType.MasterElement);

        /// <summary>[Required] Absolute timestamp according to the Segment time base.</summary>
        public const ulong CueTime = 0xB3;
        public static readonly ElementDescriptor CueTimeDescriptor = new ElementDescriptor((long)CueTime, nameof(CueTime), ElementType.UnsignedInteger);

        /// <summary>[Required] Contain positions for different tracks corresponding to the timestamp.</summary>
        public const ulong CueTrackPositions = 0xB7;
        public static readonly ElementDescriptor CueTrackPositionsDescriptor = new ElementDescriptor((long)CueTrackPositions, nameof(CueTrackPositions), ElementType.MasterElement);

        /// <summary>Number of the Block in the specified Cluster.</summary>
        public const ulong CueBlockNumber = 0x5378;
        public static readonly ElementDescriptor CueBlockNumberDescriptor = new ElementDescriptor((long)CueBlockNumber, nameof(CueBlockNumber), ElementType.UnsignedInteger);

        /// <summary>[Required] The Segment Position of the Cluster containing the associated Block.</summary>
        public const ulong CueClusterPosition = 0xF1;
        public static readonly ElementDescriptor CueClusterPositionDescriptor = new ElementDescriptor((long)CueClusterPosition, nameof(CueClusterPosition), ElementType.UnsignedInteger);

        /// <summary>The Segment Position of the Codec State corresponding to this Cue Element.0 means that the data is taken from the initial Track Entry.    </summary>
        public const ulong CueCodecState = 0xEA;
        public static readonly ElementDescriptor CueCodecStateDescriptor = new ElementDescriptor((long)CueCodecState, nameof(CueCodecState), ElementType.UnsignedInteger);

        /// <summary>The duration of the block according to the Segment time base.If missing the track's DefaultDuration does not apply and no duration information is available in terms of the cues.    </summary>
        public const ulong CueDuration = 0xB2;
        public static readonly ElementDescriptor CueDurationDescriptor = new ElementDescriptor((long)CueDuration, nameof(CueDuration), ElementType.UnsignedInteger);

        /// <summary>The Clusters containing the referenced Blocks.</summary>
        public const ulong CueReference = 0xDB;
        public static readonly ElementDescriptor CueReferenceDescriptor = new ElementDescriptor((long)CueReference, nameof(CueReference), ElementType.MasterElement);

        /// <summary>[Required] The Segment Position of the Cluster containing the referenced Block.</summary>
        public const ulong CueRefCluster = 0x97;
        public static readonly ElementDescriptor CueRefClusterDescriptor = new ElementDescriptor((long)CueRefCluster, nameof(CueRefCluster), ElementType.UnsignedInteger);

        /// <summary>The Segment Position of the Codec State corresponding to this referenced Element.0 means that the data is taken from the initial Track Entry.    </summary>
        public const ulong CueRefCodecState = 0xEB;
        public static readonly ElementDescriptor CueRefCodecStateDescriptor = new ElementDescriptor((long)CueRefCodecState, nameof(CueRefCodecState), ElementType.UnsignedInteger);

        /// <summary>Number of the referenced Block of Track X in the specified Cluster.</summary>
        public const ulong CueRefNumber = 0x535F;
        public static readonly ElementDescriptor CueRefNumberDescriptor = new ElementDescriptor((long)CueRefNumber, nameof(CueRefNumber), ElementType.UnsignedInteger);

        /// <summary>[Required] Timestamp of the referenced Block.</summary>
        public const ulong CueRefTime = 0x96;
        public static readonly ElementDescriptor CueRefTimeDescriptor = new ElementDescriptor((long)CueRefTime, nameof(CueRefTime), ElementType.UnsignedInteger);

        /// <summary>The relative position inside the Cluster of the referenced SimpleBlock or BlockGroupwith 0 being the first possible position for an Element inside that Cluster.    </summary>
        public const ulong CueRelativePosition = 0xF0;
        public static readonly ElementDescriptor CueRelativePositionDescriptor = new ElementDescriptor((long)CueRelativePosition, nameof(CueRelativePosition), ElementType.UnsignedInteger);

        /// <summary>[Required] The track for which a position is given.</summary>
        public const ulong CueTrack = 0xF7;
        public static readonly ElementDescriptor CueTrackDescriptor = new ElementDescriptor((long)CueTrack, nameof(CueTrack), ElementType.UnsignedInteger);

        /// <summary>[Required] Contains general information about the Segment.</summary>
        public const ulong Info = 0x1549A966;
        public static readonly ElementDescriptor InfoDescriptor = new ElementDescriptor((long)Info, nameof(Info), ElementType.MasterElement);

        /// <summary>A tuple of corresponding ID used by chapter codecs to represent this Segment.</summary>
        public const ulong ChapterTranslate = 0x6924;
        public static readonly ElementDescriptor ChapterTranslateDescriptor = new ElementDescriptor((long)ChapterTranslate, nameof(ChapterTranslate), ElementType.MasterElement);

        /// <summary>[Required] The chapter codec; see (#chapprocesscodecid-element).</summary>
        public const ulong ChapterTranslateCodec = 0x69BF;
        public static readonly ElementDescriptor ChapterTranslateCodecDescriptor = new ElementDescriptor((long)ChapterTranslateCodec, nameof(ChapterTranslateCodec), ElementType.UnsignedInteger);

        /// <summary>Specify an edition UID on which this correspondence applies.When not specified, it means for all editions found in the Segment.    </summary>
        public const ulong ChapterTranslateEditionUID = 0x69FC;
        public static readonly ElementDescriptor ChapterTranslateEditionUIDDescriptor = new ElementDescriptor((long)ChapterTranslateEditionUID, nameof(ChapterTranslateEditionUID), ElementType.UnsignedInteger);

        /// <summary>[Required] The binary value used to represent this Segment in the chapter codec data.The format depends on the ChapProcessCodecID used; see (#chapprocesscodecid-element).    </summary>
        public const ulong ChapterTranslateID = 0x69A5;
        public static readonly ElementDescriptor ChapterTranslateIDDescriptor = new ElementDescriptor((long)ChapterTranslateID, nameof(ChapterTranslateID), ElementType.Binary);

        /// <summary>The date and time that the Segment was created by the muxing application or library.</summary>
        public const ulong DateUTC = 0x4461;
        public static readonly ElementDescriptor DateUTCDescriptor = new ElementDescriptor((long)DateUTC, nameof(DateUTC), ElementType.Date);

        /// <summary>Duration of the Segment in nanoseconds based on TimestampScale.</summary>
        public const ulong Duration = 0x4489;
        public static readonly ElementDescriptor DurationDescriptor = new ElementDescriptor((long)Duration, nameof(Duration), ElementType.Float);

        /// <summary>[Required] Muxing application or library (example: "libmatroska-0.4.3").</summary>
        public const ulong MuxingApp = 0x4D80;
        public static readonly ElementDescriptor MuxingAppDescriptor = new ElementDescriptor((long)MuxingApp, nameof(MuxingApp), ElementType.Utf8String);

        /// <summary>A filename corresponding to the file of the next Linked Segment.</summary>
        public const ulong NextFilename = 0x3E83BB;
        public static readonly ElementDescriptor NextFilenameDescriptor = new ElementDescriptor((long)NextFilename, nameof(NextFilename), ElementType.Utf8String);

        /// <summary>A unique ID to identify the next Segment of a Linked Segment (128 bits).</summary>
        public const ulong NextUID = 0x3EB923;
        public static readonly ElementDescriptor NextUIDDescriptor = new ElementDescriptor((long)NextUID, nameof(NextUID), ElementType.Binary);

        /// <summary>A filename corresponding to the file of the previous Linked Segment.</summary>
        public const ulong PrevFilename = 0x3C83AB;
        public static readonly ElementDescriptor PrevFilenameDescriptor = new ElementDescriptor((long)PrevFilename, nameof(PrevFilename), ElementType.Utf8String);

        /// <summary>A unique ID to identify the previous Segment of a Linked Segment (128 bits).</summary>
        public const ulong PrevUID = 0x3CB923;
        public static readonly ElementDescriptor PrevUIDDescriptor = new ElementDescriptor((long)PrevUID, nameof(PrevUID), ElementType.Binary);

        /// <summary>A randomly generated unique ID that all Segments of a Linked Segment **MUST** share (128 bits).</summary>
        public const ulong SegmentFamily = 0x4444;
        public static readonly ElementDescriptor SegmentFamilyDescriptor = new ElementDescriptor((long)SegmentFamily, nameof(SegmentFamily), ElementType.Binary);

        /// <summary>A filename corresponding to this Segment.</summary>
        public const ulong SegmentFilename = 0x7384;
        public static readonly ElementDescriptor SegmentFilenameDescriptor = new ElementDescriptor((long)SegmentFilename, nameof(SegmentFilename), ElementType.Utf8String);

        /// <summary>A randomly generated unique ID to identify the Segment amongst many others (128 bits).</summary>
        public const ulong SegmentUID = 0x73A4;
        public static readonly ElementDescriptor SegmentUIDDescriptor = new ElementDescriptor((long)SegmentUID, nameof(SegmentUID), ElementType.Binary);

        /// <summary>[Required] Timestamp scale in nanoseconds (1.000.000 means all timestamps in the Segment are expressed in milliseconds).</summary>
        public const ulong TimestampScale = 0x2AD7B1;
        public static readonly ElementDescriptor TimestampScaleDescriptor = new ElementDescriptor((long)TimestampScale, nameof(TimestampScale), ElementType.UnsignedInteger);

        /// <summary>General name of the Segment.</summary>
        public const ulong Title = 0x7BA9;
        public static readonly ElementDescriptor TitleDescriptor = new ElementDescriptor((long)Title, nameof(Title), ElementType.Utf8String);

        /// <summary>[Required] Writing application (example: "mkvmerge-0.3.3").</summary>
        public const ulong WritingApp = 0x5741;
        public static readonly ElementDescriptor WritingAppDescriptor = new ElementDescriptor((long)WritingApp, nameof(WritingApp), ElementType.Utf8String);

        /// <summary>Contains the Segment Position of other Top-Level Elements.</summary>
        public const ulong SeekHead = 0x114D9B74;
        public static readonly ElementDescriptor SeekHeadDescriptor = new ElementDescriptor((long)SeekHead, nameof(SeekHead), ElementType.MasterElement);

        /// <summary>[Required] Contains a single seek entry to an EBML Element.</summary>
        public const ulong Seek = 0x4DBB;
        public static readonly ElementDescriptor SeekDescriptor = new ElementDescriptor((long)Seek, nameof(Seek), ElementType.MasterElement);

        /// <summary>[Required] The binary ID corresponding to the Element name.</summary>
        public const ulong SeekID = 0x53AB;
        public static readonly ElementDescriptor SeekIDDescriptor = new ElementDescriptor((long)SeekID, nameof(SeekID), ElementType.Binary);

        /// <summary>[Required] The Segment Position of the Element.</summary>
        public const ulong SeekPosition = 0x53AC;
        public static readonly ElementDescriptor SeekPositionDescriptor = new ElementDescriptor((long)SeekPosition, nameof(SeekPosition), ElementType.UnsignedInteger);

        /// <summary>Element containing metadata describing Tracks, Editions, Chapters, Attachments, or the Segment as a whole.A list of valid tags can be found in [@!I-D.ietf-cellar-tags].    </summary>
        public const ulong Tags = 0x1254C367;
        public static readonly ElementDescriptor TagsDescriptor = new ElementDescriptor((long)Tags, nameof(Tags), ElementType.MasterElement);

        /// <summary>[Required] A single metadata descriptor.</summary>
        public const ulong Tag = 0x7373;
        public static readonly ElementDescriptor TagDescriptor = new ElementDescriptor((long)Tag, nameof(Tag), ElementType.MasterElement);

        /// <summary>[Required] Contains general information about the target.</summary>
        public const ulong SimpleTag = 0x67C8;
        public static readonly ElementDescriptor SimpleTagDescriptor = new ElementDescriptor((long)SimpleTag, nameof(SimpleTag), ElementType.MasterElement);

        /// <summary>The values of the Tag, if it is binary. Note that this cannot be used in the same SimpleTag as TagString.</summary>
        public const ulong TagBinary = 0x4485;
        public static readonly ElementDescriptor TagBinaryDescriptor = new ElementDescriptor((long)TagBinary, nameof(TagBinary), ElementType.Binary);

        /// <summary>[Required] A boolean value to indicate if this is the default/original language to use for the given tag.</summary>
        public const ulong TagDefault = 0x4484;
        public static readonly ElementDescriptor TagDefaultDescriptor = new ElementDescriptor((long)TagDefault, nameof(TagDefault), ElementType.UnsignedInteger);

        /// <summary>[Required] Specifies the language of the tag specified, in the Matroska languages form;see (#language-codes) on language codes.This Element **MUST** be ignored if the TagLanguageIETF Element is used within the same SimpleTag Element.    </summary>
        public const ulong TagLanguage = 0x447A;
        public static readonly ElementDescriptor TagLanguageDescriptor = new ElementDescriptor((long)TagLanguage, nameof(TagLanguage), ElementType.AsciiString);

        /// <summary>Specifies the language used in the TagString according to [@!BCP47]and using the IANA Language Subtag Registry [@!IANALangRegistry].If this Element is used, then any TagLanguage Elements used in the same SimpleTag **MUST** be ignored.    </summary>
        public const ulong TagLanguageIETF = 0x447B;
        public static readonly ElementDescriptor TagLanguageIETFDescriptor = new ElementDescriptor((long)TagLanguageIETF, nameof(TagLanguageIETF), ElementType.AsciiString);

        /// <summary>[Required] The name of the Tag that is going to be stored.</summary>
        public const ulong TagName = 0x45A3;
        public static readonly ElementDescriptor TagNameDescriptor = new ElementDescriptor((long)TagName, nameof(TagName), ElementType.Utf8String);

        /// <summary>The value of the Tag.</summary>
        public const ulong TagString = 0x4487;
        public static readonly ElementDescriptor TagStringDescriptor = new ElementDescriptor((long)TagString, nameof(TagString), ElementType.Utf8String);

        /// <summary>[Required] Specifies which other elements the metadata represented by the Tag applies to.If empty or not present, then the Tag describes everything in the Segment.    </summary>
        public const ulong Targets = 0x63C0;
        public static readonly ElementDescriptor TargetsDescriptor = new ElementDescriptor((long)Targets, nameof(Targets), ElementType.MasterElement);

        /// <summary>A unique ID to identify the Attachment(s) the tags belong to.If the value is 0 at this level, the tags apply to all the attachments in the Segment.    </summary>
        public const ulong TagAttachmentUID = 0x63C6;
        public static readonly ElementDescriptor TagAttachmentUIDDescriptor = new ElementDescriptor((long)TagAttachmentUID, nameof(TagAttachmentUID), ElementType.UnsignedInteger);

        /// <summary>A unique ID to identify the Chapter(s) the tags belong to.If the value is 0 at this level, the tags apply to all chapters in the Segment.    </summary>
        public const ulong TagChapterUID = 0x63C4;
        public static readonly ElementDescriptor TagChapterUIDDescriptor = new ElementDescriptor((long)TagChapterUID, nameof(TagChapterUID), ElementType.UnsignedInteger);

        /// <summary>A unique ID to identify the EditionEntry(s) the tags belong to.If the value is 0 at this level, the tags apply to all editions in the Segment.    </summary>
        public const ulong TagEditionUID = 0x63C9;
        public static readonly ElementDescriptor TagEditionUIDDescriptor = new ElementDescriptor((long)TagEditionUID, nameof(TagEditionUID), ElementType.UnsignedInteger);

        /// <summary>A unique ID to identify the Track(s) the tags belong to.If the value is 0 at this level, the tags apply to all tracks in the Segment.    </summary>
        public const ulong TagTrackUID = 0x63C5;
        public static readonly ElementDescriptor TagTrackUIDDescriptor = new ElementDescriptor((long)TagTrackUID, nameof(TagTrackUID), ElementType.UnsignedInteger);

        /// <summary>An informational string that can be used to display the logical level of the target like "ALBUM", "TRACK", "MOVIE", "CHAPTER", etc; see Section 6.4 of [@!I-D.ietf-cellar-tags].    </summary>
        public const ulong TargetType = 0x63CA;
        public static readonly ElementDescriptor TargetTypeDescriptor = new ElementDescriptor((long)TargetType, nameof(TargetType), ElementType.AsciiString);

        /// <summary>A number to indicate the logical level of the target.</summary>
        public const ulong TargetTypeValue = 0x68CA;
        public static readonly ElementDescriptor TargetTypeValueDescriptor = new ElementDescriptor((long)TargetTypeValue, nameof(TargetTypeValue), ElementType.UnsignedInteger);

        /// <summary>A Top-Level Element of information with many tracks described.</summary>
        public const ulong Tracks = 0x1654AE6B;
        public static readonly ElementDescriptor TracksDescriptor = new ElementDescriptor((long)Tracks, nameof(Tracks), ElementType.MasterElement);

        /// <summary>[Required] Describes a track with all Elements.</summary>
        public const ulong TrackEntry = 0xAE;
        public static readonly ElementDescriptor TrackEntryDescriptor = new ElementDescriptor((long)TrackEntry, nameof(TrackEntry), ElementType.MasterElement);

        /// <summary>The UID of an attachment that is used by this codec.</summary>
        public const ulong AttachmentLink = 0x7446;
        public static readonly ElementDescriptor AttachmentLinkDescriptor = new ElementDescriptor((long)AttachmentLink, nameof(AttachmentLink), ElementType.UnsignedInteger);

        /// <summary>Audio settings.</summary>
        public const ulong Audio = 0xE1;
        public static readonly ElementDescriptor AudioDescriptor = new ElementDescriptor((long)Audio, nameof(Audio), ElementType.MasterElement);

        /// <summary>Bits per sample, mostly used for PCM.</summary>
        public const ulong BitDepth = 0x6264;
        public static readonly ElementDescriptor BitDepthDescriptor = new ElementDescriptor((long)BitDepth, nameof(BitDepth), ElementType.UnsignedInteger);

        /// <summary>Table of horizontal angles for each successive channel.</summary>
        public const ulong ChannelPositions = 0x7D7B;
        public static readonly ElementDescriptor ChannelPositionsDescriptor = new ElementDescriptor((long)ChannelPositions, nameof(ChannelPositions), ElementType.Binary);

        /// <summary>[Required] Numbers of channels in the track.</summary>
        public const ulong Channels = 0x9F;
        public static readonly ElementDescriptor ChannelsDescriptor = new ElementDescriptor((long)Channels, nameof(Channels), ElementType.UnsignedInteger);

        /// <summary>Real output sampling frequency in Hz (used for SBR techniques).</summary>
        public const ulong OutputSamplingFrequency = 0x78B5;
        public static readonly ElementDescriptor OutputSamplingFrequencyDescriptor = new ElementDescriptor((long)OutputSamplingFrequency, nameof(OutputSamplingFrequency), ElementType.Float);

        /// <summary>[Required] Sampling frequency in Hz.</summary>
        public const ulong SamplingFrequency = 0xB5;
        public static readonly ElementDescriptor SamplingFrequencyDescriptor = new ElementDescriptor((long)SamplingFrequency, nameof(SamplingFrequency), ElementType.Float);

        /// <summary>Contains elements that extend the track format, by adding content either to each frame,with BlockAddID ((#blockaddid-element)), or to the track as a wholewith BlockAddIDExtraData.    </summary>
        public const ulong BlockAdditionMapping = 0x41E4;
        public static readonly ElementDescriptor BlockAdditionMappingDescriptor = new ElementDescriptor((long)BlockAdditionMapping, nameof(BlockAdditionMapping), ElementType.MasterElement);

        /// <summary>Extra binary data that the BlockAddIDType can use to interpret the BlockAdditional data.The intepretation of the binary data depends on the BlockAddIDType value and the corresponding Block Additional Mapping.    </summary>
        public const ulong BlockAddIDExtraData = 0x41ED;
        public static readonly ElementDescriptor BlockAddIDExtraDataDescriptor = new ElementDescriptor((long)BlockAddIDExtraData, nameof(BlockAddIDExtraData), ElementType.Binary);

        /// <summary>A human-friendly name describing the type of BlockAdditional data,as defined by the associated Block Additional Mapping.    </summary>
        public const ulong BlockAddIDName = 0x41A4;
        public static readonly ElementDescriptor BlockAddIDNameDescriptor = new ElementDescriptor((long)BlockAddIDName, nameof(BlockAddIDName), ElementType.AsciiString);

        /// <summary>[Required] Stores the registered identifer of the Block Additional Mappingto define how the BlockAdditional data should be handled.    </summary>
        public const ulong BlockAddIDType = 0x41E7;
        public static readonly ElementDescriptor BlockAddIDTypeDescriptor = new ElementDescriptor((long)BlockAddIDType, nameof(BlockAddIDType), ElementType.UnsignedInteger);

        /// <summary>If the track format extension needs content beside frames,the value refers to the BlockAddID ((#blockaddid-element)), value being described.To keep MaxBlockAdditionID as low as possible, small values **SHOULD** be used.    </summary>
        public const ulong BlockAddIDValue = 0x41F0;
        public static readonly ElementDescriptor BlockAddIDValueDescriptor = new ElementDescriptor((long)BlockAddIDValue, nameof(BlockAddIDValue), ElementType.UnsignedInteger);

        /// <summary>[Required] The codec can decode potentially damaged data (1 bit).</summary>
        public const ulong CodecDecodeAll = 0xAA;
        public static readonly ElementDescriptor CodecDecodeAllDescriptor = new ElementDescriptor((long)CodecDecodeAll, nameof(CodecDecodeAll), ElementType.UnsignedInteger);

        /// <summary>CodecDelay is The codec-built-in delay in nanoseconds.This value **MUST** be subtracted from each block timestamp in order to get the actual timestamp.The value **SHOULD** be small so the muxing of tracks with the same actual timestamp are in the same Cluster.    </summary>
        public const ulong CodecDelay = 0x56AA;
        public static readonly ElementDescriptor CodecDelayDescriptor = new ElementDescriptor((long)CodecDelay, nameof(CodecDelay), ElementType.UnsignedInteger);

        /// <summary>A URL to download about the codec used.</summary>
        public const ulong CodecDownloadURL = 0x26B240;
        public static readonly ElementDescriptor CodecDownloadURLDescriptor = new ElementDescriptor((long)CodecDownloadURL, nameof(CodecDownloadURL), ElementType.AsciiString);

        /// <summary>[Required] An ID corresponding to the codec,see [@!I-D.ietf-cellar-codec] for more info.    </summary>
        public const ulong CodecID = 0x86;
        public static readonly ElementDescriptor CodecIDDescriptor = new ElementDescriptor((long)CodecID, nameof(CodecID), ElementType.AsciiString);

        /// <summary>A URL to find information about the codec used.</summary>
        public const ulong CodecInfoURL = 0x3B4040;
        public static readonly ElementDescriptor CodecInfoURLDescriptor = new ElementDescriptor((long)CodecInfoURL, nameof(CodecInfoURL), ElementType.AsciiString);

        /// <summary>A human-readable string specifying the codec.</summary>
        public const ulong CodecName = 0x258688;
        public static readonly ElementDescriptor CodecNameDescriptor = new ElementDescriptor((long)CodecName, nameof(CodecName), ElementType.Utf8String);

        /// <summary>Private data only known to the codec.</summary>
        public const ulong CodecPrivate = 0x63A2;
        public static readonly ElementDescriptor CodecPrivateDescriptor = new ElementDescriptor((long)CodecPrivate, nameof(CodecPrivate), ElementType.Binary);

        /// <summary>A string describing the encoding setting used.</summary>
        public const ulong CodecSettings = 0x3A9697;
        public static readonly ElementDescriptor CodecSettingsDescriptor = new ElementDescriptor((long)CodecSettings, nameof(CodecSettings), ElementType.Utf8String);

        /// <summary>Settings for several content encoding mechanisms like compression or encryption.</summary>
        public const ulong ContentEncodings = 0x6D80;
        public static readonly ElementDescriptor ContentEncodingsDescriptor = new ElementDescriptor((long)ContentEncodings, nameof(ContentEncodings), ElementType.MasterElement);

        /// <summary>[Required] Settings for one content encoding like compression or encryption.</summary>
        public const ulong ContentEncoding = 0x6240;
        public static readonly ElementDescriptor ContentEncodingDescriptor = new ElementDescriptor((long)ContentEncoding, nameof(ContentEncoding), ElementType.MasterElement);

        /// <summary>Settings describing the compression used.This Element **MUST** be present if the value of ContentEncodingType is 0 and absent otherwise.Each block **MUST** be decompressable even if no previous block is available in order not to prevent seeking.    </summary>
        public const ulong ContentCompression = 0x5034;
        public static readonly ElementDescriptor ContentCompressionDescriptor = new ElementDescriptor((long)ContentCompression, nameof(ContentCompression), ElementType.MasterElement);

        /// <summary>[Required] The compression algorithm used.</summary>
        public const ulong ContentCompAlgo = 0x4254;
        public static readonly ElementDescriptor ContentCompAlgoDescriptor = new ElementDescriptor((long)ContentCompAlgo, nameof(ContentCompAlgo), ElementType.UnsignedInteger);

        /// <summary>Settings that might be needed by the decompressor. For Header Stripping (`ContentCompAlgo`=3),the bytes that were removed from the beginning of each frames of the track.    </summary>
        public const ulong ContentCompSettings = 0x4255;
        public static readonly ElementDescriptor ContentCompSettingsDescriptor = new ElementDescriptor((long)ContentCompSettings, nameof(ContentCompSettings), ElementType.Binary);

        /// <summary>[Required] Tells when this modification was used during encoding/muxing starting with 0 and counting upwards.The decoder/demuxer has to start with the highest order number it finds and work its way down.This value has to be unique over all ContentEncodingOrder Elements in the TrackEntry that contains this ContentEncodingOrder element.    </summary>
        public const ulong ContentEncodingOrder = 0x5031;
        public static readonly ElementDescriptor ContentEncodingOrderDescriptor = new ElementDescriptor((long)ContentEncodingOrder, nameof(ContentEncodingOrder), ElementType.UnsignedInteger);

        /// <summary>[Required] A bit field that describes which Elements have been modified in this way.Values (big-endian) can be OR'ed.    </summary>
        public const ulong ContentEncodingScope = 0x5032;
        public static readonly ElementDescriptor ContentEncodingScopeDescriptor = new ElementDescriptor((long)ContentEncodingScope, nameof(ContentEncodingScope), ElementType.UnsignedInteger);

        /// <summary>[Required] A value describing what kind of transformation is applied.</summary>
        public const ulong ContentEncodingType = 0x5033;
        public static readonly ElementDescriptor ContentEncodingTypeDescriptor = new ElementDescriptor((long)ContentEncodingType, nameof(ContentEncodingType), ElementType.UnsignedInteger);

        /// <summary>Settings describing the encryption used.This Element **MUST** be present if the value of `ContentEncodingType` is 1 (encryption) and **MUST** be ignored otherwise.    </summary>
        public const ulong ContentEncryption = 0x5035;
        public static readonly ElementDescriptor ContentEncryptionDescriptor = new ElementDescriptor((long)ContentEncryption, nameof(ContentEncryption), ElementType.MasterElement);

        /// <summary>Settings describing the encryption algorithm used.If `ContentEncAlgo` != 5 this **MUST** be ignored.    </summary>
        public const ulong ContentEncAESSettings = 0x47E7;
        public static readonly ElementDescriptor ContentEncAESSettingsDescriptor = new ElementDescriptor((long)ContentEncAESSettings, nameof(ContentEncAESSettings), ElementType.MasterElement);

        /// <summary>[Required] The AES cipher mode used in the encryption.</summary>
        public const ulong AESSettingsCipherMode = 0x47E8;
        public static readonly ElementDescriptor AESSettingsCipherModeDescriptor = new ElementDescriptor((long)AESSettingsCipherMode, nameof(AESSettingsCipherMode), ElementType.UnsignedInteger);

        /// <summary>[Required] The encryption algorithm used.The value "0" means that the contents have not been encrypted but only signed.    </summary>
        public const ulong ContentEncAlgo = 0x47E1;
        public static readonly ElementDescriptor ContentEncAlgoDescriptor = new ElementDescriptor((long)ContentEncAlgo, nameof(ContentEncAlgo), ElementType.UnsignedInteger);

        /// <summary>For public key algorithms this is the ID of the public key the the data was encrypted with.</summary>
        public const ulong ContentEncKeyID = 0x47E2;
        public static readonly ElementDescriptor ContentEncKeyIDDescriptor = new ElementDescriptor((long)ContentEncKeyID, nameof(ContentEncKeyID), ElementType.Binary);

        /// <summary>The algorithm used for the signature.</summary>
        public const ulong ContentSigAlgo = 0x47E5;
        public static readonly ElementDescriptor ContentSigAlgoDescriptor = new ElementDescriptor((long)ContentSigAlgo, nameof(ContentSigAlgo), ElementType.UnsignedInteger);

        /// <summary>The hash algorithm used for the signature.</summary>
        public const ulong ContentSigHashAlgo = 0x47E6;
        public static readonly ElementDescriptor ContentSigHashAlgoDescriptor = new ElementDescriptor((long)ContentSigHashAlgo, nameof(ContentSigHashAlgo), ElementType.UnsignedInteger);

        /// <summary>This is the ID of the private key the data was signed with.</summary>
        public const ulong ContentSigKeyID = 0x47E4;
        public static readonly ElementDescriptor ContentSigKeyIDDescriptor = new ElementDescriptor((long)ContentSigKeyID, nameof(ContentSigKeyID), ElementType.Binary);

        /// <summary>A cryptographic signature of the contents.</summary>
        public const ulong ContentSignature = 0x47E3;
        public static readonly ElementDescriptor ContentSignatureDescriptor = new ElementDescriptor((long)ContentSignature, nameof(ContentSignature), ElementType.Binary);

        /// <summary>The period in nanoseconds (not scaled by TimestampScale) between two successive fields at the output of the decoding process,see (#defaultdecodedfieldduration) for more information    </summary>
        public const ulong DefaultDecodedFieldDuration = 0x234E7A;
        public static readonly ElementDescriptor DefaultDecodedFieldDurationDescriptor = new ElementDescriptor((long)DefaultDecodedFieldDuration, nameof(DefaultDecodedFieldDuration), ElementType.UnsignedInteger);

        /// <summary>Number of nanoseconds (not scaled via TimestampScale) per frame(frame in the Matroska sense -- one Element put into a (Simple)Block).    </summary>
        public const ulong DefaultDuration = 0x23E383;
        public static readonly ElementDescriptor DefaultDurationDescriptor = new ElementDescriptor((long)DefaultDuration, nameof(DefaultDuration), ElementType.UnsignedInteger);

        /// <summary>[Required] Set if that track (audio, video or subs) **SHOULD** be active if no language found matches the user preference. (1 bit)</summary>
        public const ulong FlagDefault = 0x88;
        public static readonly ElementDescriptor FlagDefaultDescriptor = new ElementDescriptor((long)FlagDefault, nameof(FlagDefault), ElementType.UnsignedInteger);

        /// <summary>[Required] Set if the track is usable. (1 bit)</summary>
        public const ulong FlagEnabled = 0xB9;
        public static readonly ElementDescriptor FlagEnabledDescriptor = new ElementDescriptor((long)FlagEnabled, nameof(FlagEnabled), ElementType.UnsignedInteger);

        /// <summary>[Required] Set if that track **MUST** be active during playback. There can be many forced track for a kind (audio, video or subs),the player **SHOULD** select the one which language matches the user preference or the default + forced track.Overlay **MAY** happen between a forced and non-forced track of the same kind. (1 bit)    </summary>
        public const ulong FlagForced = 0x55AA;
        public static readonly ElementDescriptor FlagForcedDescriptor = new ElementDescriptor((long)FlagForced, nameof(FlagForced), ElementType.UnsignedInteger);

        /// <summary>[Required] Set if the track **MAY** contain blocks using lacing. (1 bit)</summary>
        public const ulong FlagLacing = 0x9C;
        public static readonly ElementDescriptor FlagLacingDescriptor = new ElementDescriptor((long)FlagLacing, nameof(FlagLacing), ElementType.UnsignedInteger);

        /// <summary>Specifies the language of the track in the Matroska languages form;see (#language-codes) on language codes.This Element **MUST** be ignored if the LanguageIETF Element is used in the same TrackEntry.    </summary>
        public const ulong Language = 0x22B59C;
        public static readonly ElementDescriptor LanguageDescriptor = new ElementDescriptor((long)Language, nameof(Language), ElementType.AsciiString);

        /// <summary>Specifies the language of the track according to [@!BCP47]and using the IANA Language Subtag Registry [@!IANALangRegistry].If this Element is used, then any Language Elements used in the same TrackEntry **MUST** be ignored.    </summary>
        public const ulong LanguageIETF = 0x22B59D;
        public static readonly ElementDescriptor LanguageIETFDescriptor = new ElementDescriptor((long)LanguageIETF, nameof(LanguageIETF), ElementType.AsciiString);

        /// <summary>[Required] The maximum value of BlockAddID ((#blockaddid-element)).A value 0 means there is no BlockAdditions ((#blockadditions-element)) for this track.    </summary>
        public const ulong MaxBlockAdditionID = 0x55EE;
        public static readonly ElementDescriptor MaxBlockAdditionIDDescriptor = new ElementDescriptor((long)MaxBlockAdditionID, nameof(MaxBlockAdditionID), ElementType.UnsignedInteger);

        /// <summary>The maximum cache size necessary to store referenced frames in and the current frame.0 means no cache is needed.    </summary>
        public const ulong MaxCache = 0x6DF8;
        public static readonly ElementDescriptor MaxCacheDescriptor = new ElementDescriptor((long)MaxCache, nameof(MaxCache), ElementType.UnsignedInteger);

        /// <summary>[Required] The minimum number of frames a player **SHOULD** be able to cache during playback.If set to 0, the reference pseudo-cache system is not used.    </summary>
        public const ulong MinCache = 0x6DE7;
        public static readonly ElementDescriptor MinCacheDescriptor = new ElementDescriptor((long)MinCache, nameof(MinCache), ElementType.UnsignedInteger);

        /// <summary>A human-readable track name.</summary>
        public const ulong Name = 0x536E;
        public static readonly ElementDescriptor NameDescriptor = new ElementDescriptor((long)Name, nameof(Name), ElementType.Utf8String);

        /// <summary>[Required] After a discontinuity, SeekPreRoll is the duration in nanoseconds of the datathe decoder **MUST** decode before the decoded data is valid.    </summary>
        public const ulong SeekPreRoll = 0x56BB;
        public static readonly ElementDescriptor SeekPreRollDescriptor = new ElementDescriptor((long)SeekPreRoll, nameof(SeekPreRoll), ElementType.UnsignedInteger);

        /// <summary>[Required] The track number as used in the Block Header (using more than 127 tracks is not encouraged,though the design allows an unlimited number).    </summary>
        public const ulong TrackNumber = 0xD7;
        public static readonly ElementDescriptor TrackNumberDescriptor = new ElementDescriptor((long)TrackNumber, nameof(TrackNumber), ElementType.UnsignedInteger);

        /// <summary>A value to add to the Block's Timestamp.This can be used to adjust the playback offset of a track.    </summary>
        public const ulong TrackOffset = 0x537F;
        public static readonly ElementDescriptor TrackOffsetDescriptor = new ElementDescriptor((long)TrackOffset, nameof(TrackOffset), ElementType.SignedInteger);

        /// <summary>Operation that needs to be applied on tracks to create this virtual track.For more details look at (#track-operation).    </summary>
        public const ulong TrackOperation = 0xE2;
        public static readonly ElementDescriptor TrackOperationDescriptor = new ElementDescriptor((long)TrackOperation, nameof(TrackOperation), ElementType.MasterElement);

        /// <summary>Contains the list of all video plane tracks that need to be combined to create this 3D track</summary>
        public const ulong TrackCombinePlanes = 0xE3;
        public static readonly ElementDescriptor TrackCombinePlanesDescriptor = new ElementDescriptor((long)TrackCombinePlanes, nameof(TrackCombinePlanes), ElementType.MasterElement);

        /// <summary>[Required] Contains a video plane track that need to be combined to create this 3D track</summary>
        public const ulong TrackPlane = 0xE4;
        public static readonly ElementDescriptor TrackPlaneDescriptor = new ElementDescriptor((long)TrackPlane, nameof(TrackPlane), ElementType.MasterElement);

        /// <summary>[Required] The kind of plane this track corresponds to.</summary>
        public const ulong TrackPlaneType = 0xE6;
        public static readonly ElementDescriptor TrackPlaneTypeDescriptor = new ElementDescriptor((long)TrackPlaneType, nameof(TrackPlaneType), ElementType.UnsignedInteger);

        /// <summary>[Required] The trackUID number of the track representing the plane.</summary>
        public const ulong TrackPlaneUID = 0xE5;
        public static readonly ElementDescriptor TrackPlaneUIDDescriptor = new ElementDescriptor((long)TrackPlaneUID, nameof(TrackPlaneUID), ElementType.UnsignedInteger);

        /// <summary>Contains the list of all tracks whose Blocks need to be combined to create this virtual track</summary>
        public const ulong TrackJoinBlocks = 0xE9;
        public static readonly ElementDescriptor TrackJoinBlocksDescriptor = new ElementDescriptor((long)TrackJoinBlocks, nameof(TrackJoinBlocks), ElementType.MasterElement);

        /// <summary>[Required] The trackUID number of a track whose blocks are used to create this virtual track.</summary>
        public const ulong TrackJoinUID = 0xED;
        public static readonly ElementDescriptor TrackJoinUIDDescriptor = new ElementDescriptor((long)TrackJoinUID, nameof(TrackJoinUID), ElementType.UnsignedInteger);

        /// <summary>Specify that this track is an overlay track for the Track specified (in the u-integer).That means when this track has a gap, see (#silenttracks-element) on SilentTracks,the overlay track **SHOULD** be used instead. The order of multiple TrackOverlay matters, the first one is the one that **SHOULD** be used.If not found it **SHOULD** be the second, etc.    </summary>
        public const ulong TrackOverlay = 0x6FAB;
        public static readonly ElementDescriptor TrackOverlayDescriptor = new ElementDescriptor((long)TrackOverlay, nameof(TrackOverlay), ElementType.UnsignedInteger);

        /// <summary>[Required] DEPRECATED, DO NOT USE. The scale to apply on this track to work at normal speed in relation with other tracks(mostly used to adjust video speed when the audio length differs).    </summary>
        public const ulong TrackTimestampScale = 0x23314F;
        public static readonly ElementDescriptor TrackTimestampScaleDescriptor = new ElementDescriptor((long)TrackTimestampScale, nameof(TrackTimestampScale), ElementType.Float);

        /// <summary>The track identification for the given Chapter Codec.</summary>
        public const ulong TrackTranslate = 0x6624;
        public static readonly ElementDescriptor TrackTranslateDescriptor = new ElementDescriptor((long)TrackTranslate, nameof(TrackTranslate), ElementType.MasterElement);

        /// <summary>[Required] The chapter codec; see (#chapprocesscodecid-element).</summary>
        public const ulong TrackTranslateCodec = 0x66BF;
        public static readonly ElementDescriptor TrackTranslateCodecDescriptor = new ElementDescriptor((long)TrackTranslateCodec, nameof(TrackTranslateCodec), ElementType.UnsignedInteger);

        /// <summary>Specify an edition UID on which this translation applies. When not specified,it means for all editions found in the Segment.    </summary>
        public const ulong TrackTranslateEditionUID = 0x66FC;
        public static readonly ElementDescriptor TrackTranslateEditionUIDDescriptor = new ElementDescriptor((long)TrackTranslateEditionUID, nameof(TrackTranslateEditionUID), ElementType.UnsignedInteger);

        /// <summary>[Required] The binary value used to represent this track in the chapter codec data.The format depends on the ChapProcessCodecID used; see (#chapprocesscodecid-element).    </summary>
        public const ulong TrackTranslateTrackID = 0x66A5;
        public static readonly ElementDescriptor TrackTranslateTrackIDDescriptor = new ElementDescriptor((long)TrackTranslateTrackID, nameof(TrackTranslateTrackID), ElementType.Binary);

        /// <summary>[Required] A set of track types coded on 8 bits.</summary>
        public const ulong TrackType = 0x83;
        public static readonly ElementDescriptor TrackTypeDescriptor = new ElementDescriptor((long)TrackType, nameof(TrackType), ElementType.UnsignedInteger);

        /// <summary>[Required] A unique ID to identify the Track.This **SHOULD** be kept the same when making a direct stream copy of the Track to another file.    </summary>
        public const ulong TrackUID = 0x73C5;
        public static readonly ElementDescriptor TrackUIDDescriptor = new ElementDescriptor((long)TrackUID, nameof(TrackUID), ElementType.UnsignedInteger);

        /// <summary>The SegmentUID of the Segment containing the track identified by MasterTrackUID. See [@?DivXTrickTrack].</summary>
        public const ulong TrickMasterTrackSegmentUID = 0xC4;
        public static readonly ElementDescriptor TrickMasterTrackSegmentUIDDescriptor = new ElementDescriptor((long)TrickMasterTrackSegmentUID, nameof(TrickMasterTrackSegmentUID), ElementType.Binary);

        /// <summary>The TrackUID of the video track in the paired EBML structure that corresponds to this Smooth FF/RW track. See [@?DivXTrickTrack].</summary>
        public const ulong TrickMasterTrackUID = 0xC7;
        public static readonly ElementDescriptor TrickMasterTrackUIDDescriptor = new ElementDescriptor((long)TrickMasterTrackUID, nameof(TrickMasterTrackUID), ElementType.UnsignedInteger);

        /// <summary>Set to 1 if this video track is a Smooth FF/RW track. If set to 1, MasterTrackUID and MasterTrackSegUID should must be present and BlockGroups for this track must contain ReferenceFrame structures.Otherwise, TrickTrackUID and TrickTrackSegUID must be present if this track has a corresponding Smooth FF/RW track. See [@?DivXTrickTrack].    </summary>
        public const ulong TrickTrackFlag = 0xC6;
        public static readonly ElementDescriptor TrickTrackFlagDescriptor = new ElementDescriptor((long)TrickTrackFlag, nameof(TrickTrackFlag), ElementType.UnsignedInteger);

        /// <summary>The SegmentUID of the Segment containing the track identified by TrickTrackUID. See [@?DivXTrickTrack].</summary>
        public const ulong TrickTrackSegmentUID = 0xC1;
        public static readonly ElementDescriptor TrickTrackSegmentUIDDescriptor = new ElementDescriptor((long)TrickTrackSegmentUID, nameof(TrickTrackSegmentUID), ElementType.Binary);

        /// <summary>The TrackUID of the Smooth FF/RW video in the paired EBML structure corresponding to this video track. See [@?DivXTrickTrack].</summary>
        public const ulong TrickTrackUID = 0xC0;
        public static readonly ElementDescriptor TrickTrackUIDDescriptor = new ElementDescriptor((long)TrickTrackUID, nameof(TrickTrackUID), ElementType.UnsignedInteger);

        /// <summary>Video settings.</summary>
        public const ulong Video = 0xE0;
        public static readonly ElementDescriptor VideoDescriptor = new ElementDescriptor((long)Video, nameof(Video), ElementType.MasterElement);

        /// <summary>Alpha Video Mode. Presence of this Element indicates thatthe BlockAdditional Element could contain Alpha data.    </summary>
        public const ulong AlphaMode = 0x53C0;
        public static readonly ElementDescriptor AlphaModeDescriptor = new ElementDescriptor((long)AlphaMode, nameof(AlphaMode), ElementType.UnsignedInteger);

        /// <summary>Specify the possible modifications to the aspect ratio.</summary>
        public const ulong AspectRatioType = 0x54B3;
        public static readonly ElementDescriptor AspectRatioTypeDescriptor = new ElementDescriptor((long)AspectRatioType, nameof(AspectRatioType), ElementType.UnsignedInteger);

        /// <summary>Settings describing the colour format.</summary>
        public const ulong Colour = 0x55B0;
        public static readonly ElementDescriptor ColourDescriptor = new ElementDescriptor((long)Colour, nameof(Colour), ElementType.MasterElement);

        /// <summary>Number of decoded bits per channel. A value of 0 indicates that the BitsPerChannel is unspecified.</summary>
        public const ulong BitsPerChannel = 0x55B2;
        public static readonly ElementDescriptor BitsPerChannelDescriptor = new ElementDescriptor((long)BitsPerChannel, nameof(BitsPerChannel), ElementType.UnsignedInteger);

        /// <summary>The amount of pixels to remove in the Cb channel for every pixel not removed horizontally.This is additive with ChromaSubsamplingHorz. Example: For video with 4:2:1 chroma subsampling,the ChromaSubsamplingHorz **SHOULD** be set to 1 and CbSubsamplingHorz **SHOULD** be set to 1.    </summary>
        public const ulong CbSubsamplingHorz = 0x55B5;
        public static readonly ElementDescriptor CbSubsamplingHorzDescriptor = new ElementDescriptor((long)CbSubsamplingHorz, nameof(CbSubsamplingHorz), ElementType.UnsignedInteger);

        /// <summary>The amount of pixels to remove in the Cb channel for every pixel not removed vertically.This is additive with ChromaSubsamplingVert.    </summary>
        public const ulong CbSubsamplingVert = 0x55B6;
        public static readonly ElementDescriptor CbSubsamplingVertDescriptor = new ElementDescriptor((long)CbSubsamplingVert, nameof(CbSubsamplingVert), ElementType.UnsignedInteger);

        /// <summary>How chroma is subsampled horizontally.</summary>
        public const ulong ChromaSitingHorz = 0x55B7;
        public static readonly ElementDescriptor ChromaSitingHorzDescriptor = new ElementDescriptor((long)ChromaSitingHorz, nameof(ChromaSitingHorz), ElementType.UnsignedInteger);

        /// <summary>How chroma is subsampled vertically.</summary>
        public const ulong ChromaSitingVert = 0x55B8;
        public static readonly ElementDescriptor ChromaSitingVertDescriptor = new ElementDescriptor((long)ChromaSitingVert, nameof(ChromaSitingVert), ElementType.UnsignedInteger);

        /// <summary>The amount of pixels to remove in the Cr and Cb channels for every pixel not removed horizontally.Example: For video with 4:2:0 chroma subsampling, the ChromaSubsamplingHorz **SHOULD** be set to 1.    </summary>
        public const ulong ChromaSubsamplingHorz = 0x55B3;
        public static readonly ElementDescriptor ChromaSubsamplingHorzDescriptor = new ElementDescriptor((long)ChromaSubsamplingHorz, nameof(ChromaSubsamplingHorz), ElementType.UnsignedInteger);

        /// <summary>The amount of pixels to remove in the Cr and Cb channels for every pixel not removed vertically.Example: For video with 4:2:0 chroma subsampling, the ChromaSubsamplingVert **SHOULD** be set to 1.    </summary>
        public const ulong ChromaSubsamplingVert = 0x55B4;
        public static readonly ElementDescriptor ChromaSubsamplingVertDescriptor = new ElementDescriptor((long)ChromaSubsamplingVert, nameof(ChromaSubsamplingVert), ElementType.UnsignedInteger);

        /// <summary>SMPTE 2086 mastering data.</summary>
        public const ulong MasteringMetadata = 0x55D0;
        public static readonly ElementDescriptor MasteringMetadataDescriptor = new ElementDescriptor((long)MasteringMetadata, nameof(MasteringMetadata), ElementType.MasterElement);

        /// <summary>Maximum luminance. Represented in candelas per square meter (cd/m²).</summary>
        public const ulong LuminanceMax = 0x55D9;
        public static readonly ElementDescriptor LuminanceMaxDescriptor = new ElementDescriptor((long)LuminanceMax, nameof(LuminanceMax), ElementType.Float);

        /// <summary>Minimum luminance. Represented in candelas per square meter (cd/m²).</summary>
        public const ulong LuminanceMin = 0x55DA;
        public static readonly ElementDescriptor LuminanceMinDescriptor = new ElementDescriptor((long)LuminanceMin, nameof(LuminanceMin), ElementType.Float);

        /// <summary>Blue X chromaticity coordinate, as defined by CIE 1931.</summary>
        public const ulong PrimaryBChromaticityX = 0x55D5;
        public static readonly ElementDescriptor PrimaryBChromaticityXDescriptor = new ElementDescriptor((long)PrimaryBChromaticityX, nameof(PrimaryBChromaticityX), ElementType.Float);

        /// <summary>Blue Y chromaticity coordinate, as defined by CIE 1931.</summary>
        public const ulong PrimaryBChromaticityY = 0x55D6;
        public static readonly ElementDescriptor PrimaryBChromaticityYDescriptor = new ElementDescriptor((long)PrimaryBChromaticityY, nameof(PrimaryBChromaticityY), ElementType.Float);

        /// <summary>Green X chromaticity coordinate, as defined by CIE 1931.</summary>
        public const ulong PrimaryGChromaticityX = 0x55D3;
        public static readonly ElementDescriptor PrimaryGChromaticityXDescriptor = new ElementDescriptor((long)PrimaryGChromaticityX, nameof(PrimaryGChromaticityX), ElementType.Float);

        /// <summary>Green Y chromaticity coordinate, as defined by CIE 1931.</summary>
        public const ulong PrimaryGChromaticityY = 0x55D4;
        public static readonly ElementDescriptor PrimaryGChromaticityYDescriptor = new ElementDescriptor((long)PrimaryGChromaticityY, nameof(PrimaryGChromaticityY), ElementType.Float);

        /// <summary>Red X chromaticity coordinate, as defined by CIE 1931.</summary>
        public const ulong PrimaryRChromaticityX = 0x55D1;
        public static readonly ElementDescriptor PrimaryRChromaticityXDescriptor = new ElementDescriptor((long)PrimaryRChromaticityX, nameof(PrimaryRChromaticityX), ElementType.Float);

        /// <summary>Red Y chromaticity coordinate, as defined by CIE 1931.</summary>
        public const ulong PrimaryRChromaticityY = 0x55D2;
        public static readonly ElementDescriptor PrimaryRChromaticityYDescriptor = new ElementDescriptor((long)PrimaryRChromaticityY, nameof(PrimaryRChromaticityY), ElementType.Float);

        /// <summary>White X chromaticity coordinate, as defined by CIE 1931.</summary>
        public const ulong WhitePointChromaticityX = 0x55D7;
        public static readonly ElementDescriptor WhitePointChromaticityXDescriptor = new ElementDescriptor((long)WhitePointChromaticityX, nameof(WhitePointChromaticityX), ElementType.Float);

        /// <summary>White Y chromaticity coordinate, as defined by CIE 1931.</summary>
        public const ulong WhitePointChromaticityY = 0x55D8;
        public static readonly ElementDescriptor WhitePointChromaticityYDescriptor = new ElementDescriptor((long)WhitePointChromaticityY, nameof(WhitePointChromaticityY), ElementType.Float);

        /// <summary>The Matrix Coefficients of the video used to derive luma and chroma values from red, green, and blue color primaries.For clarity, the value and meanings for MatrixCoefficients are adopted from Table 4 of ISO/IEC 23001-8:2016 or ITU-T H.273.    </summary>
        public const ulong MatrixCoefficients = 0x55B1;
        public static readonly ElementDescriptor MatrixCoefficientsDescriptor = new ElementDescriptor((long)MatrixCoefficients, nameof(MatrixCoefficients), ElementType.UnsignedInteger);

        /// <summary>Maximum brightness of a single pixel (Maximum Content Light Level)in candelas per square meter (cd/m²).    </summary>
        public const ulong MaxCLL = 0x55BC;
        public static readonly ElementDescriptor MaxCLLDescriptor = new ElementDescriptor((long)MaxCLL, nameof(MaxCLL), ElementType.UnsignedInteger);

        /// <summary>Maximum brightness of a single full frame (Maximum Frame-Average Light Level)in candelas per square meter (cd/m²).    </summary>
        public const ulong MaxFALL = 0x55BD;
        public static readonly ElementDescriptor MaxFALLDescriptor = new ElementDescriptor((long)MaxFALL, nameof(MaxFALL), ElementType.UnsignedInteger);

        /// <summary>The colour primaries of the video. For clarity,the value and meanings for Primaries are adopted from Table 2 of ISO/IEC 23091-4 or ITU-T H.273.    </summary>
        public const ulong Primaries = 0x55BB;
        public static readonly ElementDescriptor PrimariesDescriptor = new ElementDescriptor((long)Primaries, nameof(Primaries), ElementType.UnsignedInteger);

        /// <summary>Clipping of the color ranges.</summary>
        public const ulong Range = 0x55B9;
        public static readonly ElementDescriptor RangeDescriptor = new ElementDescriptor((long)Range, nameof(Range), ElementType.UnsignedInteger);

        /// <summary>The transfer characteristics of the video. For clarity,the value and meanings for TransferCharacteristics are adopted from Table 3 of ISO/IEC 23091-4 or ITU-T H.273.    </summary>
        public const ulong TransferCharacteristics = 0x55BA;
        public static readonly ElementDescriptor TransferCharacteristicsDescriptor = new ElementDescriptor((long)TransferCharacteristics, nameof(TransferCharacteristics), ElementType.UnsignedInteger);

        /// <summary>Specify the pixel format used for the Track's data as a FourCC.This value is similar in scope to the biCompression value of AVI's BITMAPINFOHEADER.    </summary>
        public const ulong ColourSpace = 0x2EB524;
        public static readonly ElementDescriptor ColourSpaceDescriptor = new ElementDescriptor((long)ColourSpace, nameof(ColourSpace), ElementType.Binary);

        /// <summary>Height of the video frames to display. Applies to the video frame after cropping (PixelCrop* Elements).</summary>
        public const ulong DisplayHeight = 0x54BA;
        public static readonly ElementDescriptor DisplayHeightDescriptor = new ElementDescriptor((long)DisplayHeight, nameof(DisplayHeight), ElementType.UnsignedInteger);

        /// <summary>How DisplayWidth & DisplayHeight are interpreted.</summary>
        public const ulong DisplayUnit = 0x54B2;
        public static readonly ElementDescriptor DisplayUnitDescriptor = new ElementDescriptor((long)DisplayUnit, nameof(DisplayUnit), ElementType.UnsignedInteger);

        /// <summary>Width of the video frames to display. Applies to the video frame after cropping (PixelCrop* Elements).</summary>
        public const ulong DisplayWidth = 0x54B0;
        public static readonly ElementDescriptor DisplayWidthDescriptor = new ElementDescriptor((long)DisplayWidth, nameof(DisplayWidth), ElementType.UnsignedInteger);

        /// <summary>[Required] Declare the field ordering of the video.If FlagInterlaced is not set to 1, this Element **MUST** be ignored.    </summary>
        public const ulong FieldOrder = 0x9D;
        public static readonly ElementDescriptor FieldOrderDescriptor = new ElementDescriptor((long)FieldOrder, nameof(FieldOrder), ElementType.UnsignedInteger);

        /// <summary>[Required] A flag to declare if the video is known to be progressive,or interlaced, and if applicable to declare details about the interlacement.    </summary>
        public const ulong FlagInterlaced = 0x9A;
        public static readonly ElementDescriptor FlagInterlacedDescriptor = new ElementDescriptor((long)FlagInterlaced, nameof(FlagInterlaced), ElementType.UnsignedInteger);

        /// <summary>Number of frames per second. This value is Informational only. It is intended for constant frame rate streams, and SHOULD NOT be used for a variable frame rate TrackEntry.</summary>
        public const ulong FrameRate = 0x2383E3;
        public static readonly ElementDescriptor FrameRateDescriptor = new ElementDescriptor((long)FrameRate, nameof(FrameRate), ElementType.Float);

        /// <summary>Gamma Value.</summary>
        public const ulong GammaValue = 0x2FB523;
        public static readonly ElementDescriptor GammaValueDescriptor = new ElementDescriptor((long)GammaValue, nameof(GammaValue), ElementType.Float);

        /// <summary>DEPRECATED, DO NOT USE. Bogus StereoMode value used in old versions of libmatroska.</summary>
        public const ulong OldStereoMode = 0x53B9;
        public static readonly ElementDescriptor OldStereoModeDescriptor = new ElementDescriptor((long)OldStereoMode, nameof(OldStereoMode), ElementType.UnsignedInteger);

        /// <summary>The number of video pixels to remove at the bottom of the image.</summary>
        public const ulong PixelCropBottom = 0x54AA;
        public static readonly ElementDescriptor PixelCropBottomDescriptor = new ElementDescriptor((long)PixelCropBottom, nameof(PixelCropBottom), ElementType.UnsignedInteger);

        /// <summary>The number of video pixels to remove on the left of the image.</summary>
        public const ulong PixelCropLeft = 0x54CC;
        public static readonly ElementDescriptor PixelCropLeftDescriptor = new ElementDescriptor((long)PixelCropLeft, nameof(PixelCropLeft), ElementType.UnsignedInteger);

        /// <summary>The number of video pixels to remove on the right of the image.</summary>
        public const ulong PixelCropRight = 0x54DD;
        public static readonly ElementDescriptor PixelCropRightDescriptor = new ElementDescriptor((long)PixelCropRight, nameof(PixelCropRight), ElementType.UnsignedInteger);

        /// <summary>The number of video pixels to remove at the top of the image.</summary>
        public const ulong PixelCropTop = 0x54BB;
        public static readonly ElementDescriptor PixelCropTopDescriptor = new ElementDescriptor((long)PixelCropTop, nameof(PixelCropTop), ElementType.UnsignedInteger);

        /// <summary>[Required] Height of the encoded video frames in pixels.</summary>
        public const ulong PixelHeight = 0xBA;
        public static readonly ElementDescriptor PixelHeightDescriptor = new ElementDescriptor((long)PixelHeight, nameof(PixelHeight), ElementType.UnsignedInteger);

        /// <summary>[Required] Width of the encoded video frames in pixels.</summary>
        public const ulong PixelWidth = 0xB0;
        public static readonly ElementDescriptor PixelWidthDescriptor = new ElementDescriptor((long)PixelWidth, nameof(PixelWidth), ElementType.UnsignedInteger);

        /// <summary>Describes the video projection details. Used to render spherical and VR videos.</summary>
        public const ulong Projection = 0x7670;
        public static readonly ElementDescriptor ProjectionDescriptor = new ElementDescriptor((long)Projection, nameof(Projection), ElementType.MasterElement);

        /// <summary>[Required] Specifies a pitch rotation to the projection.Value represents a counter-clockwise rotation, in degrees, around the right vector. This rotation must be appliedafter the `ProjectionPoseYaw` rotation and before the `ProjectionPoseRoll` rotation.The value of this field should be in the -90 to 90 degree range.    </summary>
        public const ulong ProjectionPosePitch = 0x7674;
        public static readonly ElementDescriptor ProjectionPosePitchDescriptor = new ElementDescriptor((long)ProjectionPosePitch, nameof(ProjectionPosePitch), ElementType.Float);

        /// <summary>[Required] Specifies a roll rotation to the projection.Value represents a counter-clockwise rotation, in degrees, around the forward vector. This rotation must be appliedafter the `ProjectionPoseYaw` and `ProjectionPosePitch` rotations.The value of this field should be in the -180 to 180 degree range.    </summary>
        public const ulong ProjectionPoseRoll = 0x7675;
        public static readonly ElementDescriptor ProjectionPoseRollDescriptor = new ElementDescriptor((long)ProjectionPoseRoll, nameof(ProjectionPoseRoll), ElementType.Float);

        /// <summary>[Required] Specifies a yaw rotation to the projection.Value represents a clockwise rotation, in degrees, around the up vector. This rotation must be appliedbefore any `ProjectionPosePitch` or `ProjectionPoseRoll` rotations.The value of this field should be in the -180 to 180 degree range.    </summary>
        public const ulong ProjectionPoseYaw = 0x7673;
        public static readonly ElementDescriptor ProjectionPoseYawDescriptor = new ElementDescriptor((long)ProjectionPoseYaw, nameof(ProjectionPoseYaw), ElementType.Float);

        /// <summary>Private data that only applies to a specific projection.*  If `ProjectionType` equals 0 (Rectangular),then this element must not be present.*  If `ProjectionType` equals 1 (Equirectangular), then this element must be present and contain the same binary data that would be stored insidean ISOBMFF Equirectangular Projection Box ('equi').*  If `ProjectionType` equals 2 (Cubemap), then this element must be present and contain the same binary data that would be storedinside an ISOBMFF Cubemap Projection Box ('cbmp').*  If `ProjectionType` equals 3 (Mesh), then this element must be present and contain the same binary data that would be stored insidean ISOBMFF Mesh Projection Box ('mshp').    </summary>
        public const ulong ProjectionPrivate = 0x7672;
        public static readonly ElementDescriptor ProjectionPrivateDescriptor = new ElementDescriptor((long)ProjectionPrivate, nameof(ProjectionPrivate), ElementType.Binary);

        /// <summary>[Required] Describes the projection used for this video track.</summary>
        public const ulong ProjectionType = 0x7671;
        public static readonly ElementDescriptor ProjectionTypeDescriptor = new ElementDescriptor((long)ProjectionType, nameof(ProjectionType), ElementType.UnsignedInteger);

        /// <summary>Stereo-3D video mode. There are some more details in (#multi-planar-and-3d-videos).</summary>
        public const ulong StereoMode = 0x53B8;
        public static readonly ElementDescriptor StereoModeDescriptor = new ElementDescriptor((long)StereoMode, nameof(StereoMode), ElementType.UnsignedInteger);

        #endregion
    }
}