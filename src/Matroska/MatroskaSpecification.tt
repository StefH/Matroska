<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    string XmlFile = "ebml_matroska.xml";
    XNamespace ns = "urn:ietf:rfc:8794";
#>
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Linq;
using System.Reflection;
using NEbml.Core;

//--------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This C# code class was auto-generated at <#= DateTime.Now #>.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
//     Based on "https://github.com/ietf-wg-cellar/matroska-specification/blob/master/ebml_matroska.xml".
// </auto-generated>
//--------------------------------------------------------------------------------------------------------
namespace Matroska
{
    /// <summary>
    /// Contains the EBML elements specified by the Matroska project (https://matroska.org/technical/specs/index.html)
    /// </summary>
    [GeneratedCode("MatroskaSpecification.tt", "1.0.0.0")]
    internal static class MatroskaSpecification
    {
<#
    string filename = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), XmlFile);
    var elements = XElement.Load(filename).Elements()
        .Select(e => new
        { 
            Name = e.Attribute("name").Value.Replace("CRC-32", "CRC32"),
            Path = e.Attribute("path").Value,
            Id = e.Attribute("id").Value,
            ElementType = e.Attribute("type").Value,
            Required = (e.Attribute("minOccurs") != null ? int.Parse(e.Attribute("minOccurs").Value) : 0) > 0,
            Documentation = e.Element(ns + "documentation") != null ? e.Element(ns + "documentation").Value : ""
        })
        //.Where(e => !e.Name.StartsWith("EBML"))
        .OrderBy(e => e.Path);
#>
        #region Helper
        private static readonly Dictionary<VInt, ElementDescriptor> _elementDescriptorsByVInt = new Dictionary<VInt, ElementDescriptor>();
        private static readonly Dictionary<ulong, ElementDescriptor> _elementDescriptorsByIdentifier = new Dictionary<ulong, ElementDescriptor>();

        /// <summary>
        /// Gets a dictionary of all Matroska elements.
        /// </summary>
        public static IReadOnlyDictionary<VInt, ElementDescriptor> ElementDescriptors => _elementDescriptorsByVInt;

        /// <summary>
        /// Gets a dictionary of all Matroska elements.
        /// </summary>
        public static IReadOnlyDictionary<ulong, ElementDescriptor> ElementDescriptorsByIdentifier => _elementDescriptorsByIdentifier;

        static MatroskaSpecification()
        {
            var fields = typeof(MatroskaSpecification).GetFields(BindingFlags.Public | BindingFlags.Static);

            foreach (FieldInfo field in fields.Where(ft => ft.FieldType == typeof(ElementDescriptor)))
            {
                var value = (ElementDescriptor)field.GetValue(null);
                _elementDescriptorsByVInt.Add(value.Identifier, value);
            }

            foreach (FieldInfo field in fields.Where(ft => ft.FieldType == typeof(ulong)))
            {
                var identifier = (ulong)field.GetValue(null);
                _elementDescriptorsByIdentifier.Add(identifier, _elementDescriptorsByVInt[VInt.FromEncoded(identifier)]);
            }
        }
        #endregion

        #region Definitions
<#
    foreach (var element in elements)
    {
        string elementType;
        switch (element.ElementType)
        {
            case "master":
                elementType = "MasterElement";
                break;

            case "utf-8":
                elementType = "Utf8String";
                break;

            case "string":
                elementType = "AsciiString";
                break;

            case "binary":
                elementType = "Binary";
                break;

            case "date":
                elementType = "Date";
                break;

            case "float":
                elementType = "Float";
                break;

            case "uinteger":
                elementType = "UnsignedInteger";
                break;

            case "integer":
                elementType = "SignedInteger";
                break;

            default:
                elementType = element.ElementType;
                break;
        }

#>
        /// <summary><#=(element.Required ? "[Required] " : "")#><#=element.Documentation.Replace("\n", "").Replace("      ", "")#></summary>
        public const ulong <#=element.Name#> = <#=element.Id#>;
        public static readonly ElementDescriptor <#=element.Name#>Descriptor = new ElementDescriptor(<#=element.Name#>, nameof(<#=element.Name#>), ElementType.<#=elementType#>);

<#
    }
#>
        #endregion
    }
}