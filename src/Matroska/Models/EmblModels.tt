<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    string XmlFile = "../ebml_matroska.xml";
    XNamespace ns = "urn:ietf:rfc:8794";
#>
/*
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated at <#= DateTime.Now #>.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Matroska.Models2
{
<#
    string filename = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), XmlFile);
    var elements = XElement.Load(filename).Elements()
        .Select(e => new
        { 
            Name = e.Attribute("name").Value,
            Path = e.Attribute("path").Value,
            Id = e.Attribute("id").Value,
            ElementType = e.Attribute("type").Value,
            Required = (e.Attribute("minOccurs") != null ? int.Parse(e.Attribute("minOccurs").Value) : 0) > 0,
            Documentation = e.Element(ns + "documentation") != null ? e.Element(ns + "documentation").Value : ""
        })
        .Where(e => !e.Name.StartsWith("EBML"))
        .Where(e => e.Name != "SimpleBlock")
        .Where(e => e.Name != "Block")
        .OrderBy(e => e.Name);
#>
<#
    foreach (var master in elements.Where(e => e.ElementType == "master"))
    {
        var element = master;
#>
    public sealed class <#=element.Name#>
    {
    <#
        var properties = elements.Where(e => e.ElementType != "master" && e.Path.Contains("\\" + element.Name  + "\\"));
        foreach (var property in properties)
        {
            string propertyType;
            switch (property.ElementType)
            {
                case "utf-8":
                    propertyType = "string";
                    break;

                case "string":
                    propertyType = "string";
                    break;

                case "binary":
                    propertyType = "byte[]";
                    break;

                case "date":
                    propertyType = "DateTime";
                    break;

                case "float":
                    propertyType = "float";
                    break;

                case "uinteger":
                    propertyType = "ulong";
                    break;

                case "integer":
                    propertyType = "long";
                    break;

                default:
                    propertyType = "huh";
                    break;
            }
#>
        public <#=propertyType#><#=(!property.Required || property.ElementType == "binary" ? "?" : "")#> <#=property.Name#> { get; set; }
<#
            }
        #>
    }

<#
    }
#>
}
*/